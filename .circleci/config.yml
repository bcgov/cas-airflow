version: 2.1

orbs:
  gcp-gcr: circleci/gcp-gcr@0.11.0

jobs:
  test_stream_minio:
    parameters:
      cache_version:
        type: integer
        default: 1
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/cas-airflow/docker/stream-minio
    steps:
      - restore_cache:
          keys:
            - v<< parameters.cache_version>>-stream-minio-{{ .Branch }}
          paths:
            - /caches/stream-minio.tar
      - setup_remote_docker
      - run:
          name: Load cache
          command: |
            set +o pipefail
            docker load -i /caches/stream-minio.tar | true
      - run:
          name: Test Docker image
          environment:
            DEPTH: 2
            WEBSITE: https://nodejs.org/dist/
            FILTER: \.png|\.svg
          command: |
            CONTEXT="--env DEPTH=$DEPTH --env WEBSITE=$WEBSITE --env FILTER=$FILTER --env MINIO_HOST=$MINIO_HOST --env MINIO_ACCESS_KEY=$MINIO_ACCESS_KEY --env MINIO_SECRET_KEY=$MINIO_SECRET_KEY"
            CONTAINER_ID=$(docker run -itd $CONTEXT stream-minio /bin/bash)
            docker exec -it $CONTAINER_ID ./test.sh veryuniquebucket$CIRCLE_WORKFLOW_ID


  build_cache_and_push:
    executor: gcp-gcr/default
    parameters:
      image_name:
        type: string
      image_tag:
        type: string
      cache_version:
        type: integer
        default: 2
      should_push:
        type: boolean
        default: true
    working_directory: ~/cas-airflow/docker/<< parameters.image_name >>
    steps:
      - checkout
      - gcp-gcr/gcr-auth
      - restore_cache:
          keys:
            - v<< parameters.cache_version>>-<< parameters.image_name >>-{{ .Branch }}
          paths:
            - /tmp/<< parameters.image_name >>.tar
      - run:
          name: Load cache
          command: |
            set +o pipefail
            docker load -i /tmp/<< parameters.image_name >>.tar | true
      - run:
          name: Log in to DockerHub
          command: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin registry.hub.docker.com
      - when: 
          condition: << parameters.should_push >>
          steps:
            - run:
                name: Build application Docker image
                command: |
                  docker build --cache-from=<< parameters.image_name >> -t << parameters.image_name >>:latest -t gcr.io/${GOOGLE_PROJECT_ID}/cas-airflow-<< parameters.image_name >>:<< parameters.image_tag >> .
      - when:
          condition:
            not: << parameters.should_push >>
          steps:
            - run:
                name: Build application test docker image
                command: |
                  docker build --cache-from=<< parameters.image_name >> -t << parameters.image_name >>:latest .
      - run:
          name: Save Docker image layer cache
          command: |
            docker save -o /tmp/<< parameters.image_name >>.tar << parameters.image_name >>:latest
      - save_cache:
          key: v<< parameters.cache_version>>-<< parameters.image_name >>-{{ .Branch }}-{{ epoch }}
          paths:
            - /tmp/<< parameters.image_name >>.tar
      - when:
          condition:
            equal: [true, << parameters.should_push >>]
          steps:
            - gcp-gcr/push-image:
                image: cas-airflow-<< parameters.image_name >>
                tag: << parameters.image_tag >>
                digest-path: /tmp/digest.txt
            - run:
                command: |
                  echo "Digest is: $(</tmp/digest.txt)"

workflows:
  version: 2
  cas-airflow:
    jobs:
      - build_cache_and_push:
          name: build_and_push_sha1_<< matrix.image_name >>
          matrix:
            parameters:
              image_name: ["extract-zips-to-ggircs"]
          image_name: << matrix.image_name >>
          image_tag: ${CIRCLE_SHA1}
          context: cas-pipeline          
          filters:
            branches:
              only:
                - develop
                - master
      - build_cache_and_push:
          name: build_and_push_tag_<< matrix.image_name >>
          matrix:
            parameters:
              image_name: ["extract-zips-to-ggircs"]
          image_name: << matrix.image_name >>
          image_tag: ${CIRCLE_TAG/v/}
          context: cas-pipeline          
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      # TODO: add generic test job to avoid code duplication below (between build scripts)
      - build_cache_and_push:
          name: build_stream_minio_for_testing
          image_name: stream-minio
          image_tag: ""
          should_push: false
          context: cas-pipeline
          filters:
            tags:
              only: /^v.*/
      - test_stream_minio:
          requires:          
            - build_stream_minio_for_testing
          name: test_stream_minio
          filters:
            tags:
              only: /^v.*/
      - build_cache_and_push:
          name: build_and_push_sha1_<< matrix.image_name >>
          matrix:
            parameters:
              image_name: ["stream-minio"]
          image_name: << matrix.image_name >>
          image_tag: ${CIRCLE_SHA1}
          context: cas-pipeline          
          filters:
            branches:
              only:
                - develop
                - master      
      - build_cache_and_push:
          name: build_and_push_tag_<< matrix.image_name >>
          matrix:
            parameters:
              image_name: ["stream-minio"]
          image_name: << matrix.image_name >>
          image_tag: ${CIRCLE_TAG/v/}
          context: cas-pipeline          
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/